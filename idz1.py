#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Парой называется класс с двумя полями, которые обычно имеют имена first и second. Требуется реализовать тип данных с
# помощью такого класса. Во всех заданиях обязательно должны  присутствовать:
# метод инициализации __init__ ; метод должен контролировать значения аргументов на корректность;
# ввод с клавиатуры read ;
# вывод на экран display .
# Реализовать внешнюю функцию с именем make_тип() , где тип — тип реализуемой структуры. Функция должна получать в
# качестве аргументов значения для полей структуры и возвращать  структуру требуемого типа. При передаче ошибочных
# параметров следует выводить сообщение и заканчивать работу. В раздел программы, начинающийсяпосле инструкции
# if __name__ = '__main__': добавить код, демонстрирующий возможности разработанного класса.
# Условия варианта 6:
# Поле first — целое положительное число, калорийность 100 г продукта; поле second —  дробное положительное число,
# масса продукта в килограммах. Реализовать метод power() — вычисление общей калорийности продукта.

class Pair:
    def __init__(self, first=None, second=None):
        # Если аргументы не переданы, то инициализируем их как None (без проверки)
        if first is not None and (not isinstance(first, int) or first <= 0):
            raise ValueError("Поле 'first' должно быть целым положительным числом (калорийность 100 г продукта).")
        if second is not None and (not isinstance(second, (int, float)) or second <= 0):
            raise ValueError("Поле 'second' должно быть положительным числом (масса продукта в килограммах).")

        self.first = first
        self.second = second

    def read(self):
        # Ввод значений с клавиатуры с проверкой
        try:
            self.first = int(input("Введите калорийность 100 г продукта (целое положительное число): "))
            if self.first <= 0:
                raise ValueError
        except ValueError:
            print("Ошибка: значение калорийности должно быть целым положительным числом.")
            return

        try:
            self.second = float(input("Введите массу продукта в килограммах (положительное число): "))
            if self.second <= 0:
                raise ValueError
        except ValueError:
            print("Ошибка: значение массы должно быть положительным числом.")

    def display(self):
        # Вывод значений на экран
        if self.first is None or self.second is None:
            print("Данные не заполнены.")
        else:
            print(f"Калорийность 100 г продукта: {self.first} ккал")
            print(f"Масса продукта: {self.second} кг")

    def power(self):
        # Проверка перед расчетом
        if self.first is None or self.second is None:
            print("Невозможно вычислить общую калорийность. Данные не заполнены.")
            return None
        # Вычисление общей калорийности продукта
        return self.first * self.second * 10  # 100 г = 0.1 кг, поэтому умножаем на 10


# Внешняя функция создания объекта Pair
def make_pair(first, second):
    try:
        return Pair(first, second)
    except ValueError as e:
        print(f"Ошибка при создании объекта: {e}")
        return None


if __name__ == '__main__':
    # Демонстрация возможностей класса

    # Пример использования make_pair
    print("Создание объекта через make_pair:")
    pair = make_pair(250, 1.5)  # Калорийность 100 г = 250 ккал, масса = 1.5 кг
    if pair:
        pair.display()
        print(f"Общая калорийность продукта: {pair.power()} ккал")

    print("\nВвод данных вручную:")
    pair2 = Pair()  # Создаем объект без значений
    pair2.read()  # Ввод с клавиатуры
    pair2.display()  # Вывод на экран
    if pair2.power() is not None:
        print(f"Общая калорийность продукта: {pair2.power()} ккал")
